"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[890],{8890:(e,t,o)=>{o.d(t,{WebCodecsExportEngine:()=>n});var i=o(26),r=o(7997),s=o(4999);class n extends i.N{async initialize(){try{if(!await r.w.safeWebCodecsCheck())throw console.log("WebCodecs not available, will use existing export engine"),Error("FALLBACK_TO_EXISTING_ENGINE");let e=await r.w.checkSupport();if(!e.supported)throw console.log("WebCodecs supported but no compatible codecs found"),Error("FALLBACK_TO_EXISTING_ENGINE");console.log("WebCodecs supported codecs:",e.codecs),console.log("Hardware acceleration:",e.hardwareAcceleration);let t=await r.w.getBestCodec();if(!t)throw Error("FALLBACK_TO_EXISTING_ENGINE");await this.initializeMuxer(t),await this.initializeEncoder(t),console.log("âœ… WebCodecs initialization successful")}catch(e){if(e instanceof Error&&"FALLBACK_TO_EXISTING_ENGINE"===e.message)throw e;throw console.log("WebCodecs initialization failed:",e),Error("FALLBACK_TO_EXISTING_ENGINE")}}async initializeMuxer(e){try{let{Muxer:t,ArrayBufferTarget:i}=await o.e(943).then(o.bind(o,5943)),r=new i;this.muxer=new t({target:r,video:{codec:e,width:this.settings.width,height:this.settings.height},fastStart:"in-memory"}),console.log("\uD83D\uDCE6 MP4 muxer initialized with",this.webCodecsSettings.bufferSize/1048576,"MB buffer")}catch(e){throw console.log("Failed to initialize muxer:",e),e}}async initializeEncoder(e){this.encoder=new VideoEncoder({output:(e,t)=>{this.handleEncodedChunk(e,t)},error:e=>{var t;console.log("WebCodecs encoder error:",e),null==(t=this.onError)||t.call(this,e.message)}});let t={codec:e,width:this.settings.width,height:this.settings.height,bitrate:this.webCodecsSettings.bitrate,framerate:this.fps,latencyMode:"quality",hardwareAcceleration:"hardware"===this.webCodecsSettings.type?"prefer-hardware":"prefer-software"};if(!(await VideoEncoder.isConfigSupported(t)).supported)throw Error("WebCodecs config not supported: ".concat(JSON.stringify(t)));this.encoder.configure(t),this.isEncoding=!0,console.log("\uD83C\uDFAC WebCodecs encoder configured:",t)}handleEncodedChunk(e,t){if(this.muxer)try{this.muxer.addVideoChunk(e,t)}catch(e){var o;console.log("Error adding chunk to muxer:",e),null==(o=this.onError)||o.call(this,"Muxing error: ".concat(e))}}async renderAndEncodeFrame(e){if(!this.encoder||!this.isEncoding)throw Error("WebCodecs encoder not initialized");await this.memoryMonitor.checkMemoryDuringExport(this.frameCount),await this.renderSingleFrameOptimized(e);let t=1e6*this.frameCount/this.fps,o=new VideoFrame(this.canvas,{timestamp:t,duration:1e6/this.fps});try{let e=this.frameCount%this.webCodecsSettings.keyFrameInterval==0;this.encoder.encode(o,{keyFrame:e}),this.frameCount++,o.close()}catch(e){throw o.close(),e}}async finalize(){if(!this.encoder||!this.muxer)throw Error("WebCodecs components not initialized");return console.log("\uD83C\uDFAC Finalizing WebCodecs export..."),await this.encoder.flush(),this.encoder.close(),this.isEncoding=!1,this.muxer.finalize(),new Blob([this.muxer.target.buffer],{type:"video/mp4"})}async startExport(){var e,t,o,i,r;try{await this.initialize(),null==(e=this.onProgress)||e.call(this,5,"WebCodecs encoder initialized");let r=this.captureService.getTotalFrames();console.log("\uD83D\uDE80 Starting WebCodecs export: ".concat(r," frames"));for(let e=0;e<r;e++){if(this.shouldCancel)throw Error("Export cancelled");let t=this.captureService.getFrameData(e);await this.renderAndEncodeFrame(t);let o=10+Math.floor(e/r*85),s=this.memoryMonitor.getMemoryStatusString();null==(i=this.onProgress)||i.call(this,o,"Encoding frame ".concat(e+1,"/").concat(r," (WebCodecs) - ").concat(s))}null==(t=this.onProgress)||t.call(this,95,"Finalizing video...");let s=await this.finalize();return null==(o=this.onProgress)||o.call(this,100,"WebCodecs export complete!"),s}catch(e){console.log("WebCodecs export failed:",e);try{this.encoder&&"closed"!==this.encoder.state&&this.encoder.close(),this.encoder=null,this.muxer=null,this.isEncoding=!1,await this.memoryMonitor.optimizeMemoryUsage()}catch(e){console.log("WebCodecs cleanup error (non-critical):",e)}return console.log("\uD83D\uDD04 Falling back to existing optimized export engine"),null==(r=this.onProgress)||r.call(this,0,"Switching to optimized export engine..."),super.startExport()}}cancelExport(){if(this.shouldCancel=!0,this.encoder&&"closed"!==this.encoder.state)try{this.encoder.close()}catch(e){console.log("Error closing encoder during cancel:",e)}super.cancelExport()}getExportStatus(){return{frameCount:this.frameCount,memoryUsage:this.memoryMonitor.getMemoryStatusString(),engineType:"WebCodecs",hardwareAccelerated:"hardware"===this.webCodecsSettings.type}}async forceGarbageCollection(){await this.memoryMonitor.optimizeMemoryUsage()}constructor(e){super(e),this.encoder=null,this.muxer=null,this.frameCount=0,this.isEncoding=!1,this.memoryMonitor=e.memoryMonitor||new s.l,this.webCodecsSettings=e.webCodecsSettings||{type:"software",bitrate:8e6,keyFrameInterval:30,bufferSize:0x10000000,parallelEncoders:1,qualityLevel:"medium"},console.log("\uD83D\uDE80 WebCodecs export engine initialized")}}}}]);